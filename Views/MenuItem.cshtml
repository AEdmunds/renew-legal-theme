@{
    // odd formatting in this file is to cause more attractive results in the output.
    var items = Enumerable.Cast<dynamic>((System.Collections.IEnumerable)Model);
}
@{
    if (!HasText(Model.Text)) {
        @DisplayChildren(Model)
    }
    else {
        if ((bool) Model.Selected) {
            Model.Classes.Add("current");
        }

        if (items.Any()) {
            Model.Classes.Add("dropdown");
        }

        @* morphing the shape to keep Model untouched*@
        Model.Metadata.Alternates.Clear();
        Model.Metadata.Type = "MenuItemLink";
       
        @* render the menu item only if it has some content *@
        var renderedMenuItemLink = Display(Model);
        if (HasText(renderedMenuItemLink)) {
            var tag = Tag(Model, "li");
            @tag.StartElement

            if (Request.Url != null && Request.Url.PathAndQuery.Replace("renewlegal", "") == "/") {
                // home page 
                if (((string)Model.Item.Href).StartsWith("#"))
                {
                    <a href="@Model.Item.Href" >@Model.Item.Text</a>
                }
                else 
                {
                    <a href="@Model.Item.Href" class="external" >@Model.Item.Text</a>
                }
            }
            else {
                // not home page 
                if (((string)Model.Item.Href).StartsWith("#"))
                {
                    <a href="@Url.Content(@"~/" + Model.Item.Href)"  class="external" >@Model.Item.Text</a>
                }
                else 
                {
                    <a href="@Model.Item.Href" class="external" >@Model.Item.Text</a>
                }
            }
            


            

                if (items.Any()) {
                    <ul>
                        @DisplayChildren(Model)
                    </ul>
                }
    
            @tag.EndElement
        }
    }
}